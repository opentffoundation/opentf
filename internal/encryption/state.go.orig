package encryption

import (
	"encoding/json"

	"github.com/hashicorp/hcl/v2"
)

// This currently deals with raw bytes so it could be moved into it's own library and not depend explicitly on the OpenTofu codestate.
type StateEncryption interface {
	EncryptState([]byte) ([]byte, hcl.Diagnostics)
	DecryptState([]byte) ([]byte, hcl.Diagnostics)
}

type stateEncryption struct {
	base *baseEncryption
}

func NewState(enc *encryption, target *TargetConfig, name string) StateEncryption {
	return &stateEncryption{
		base: newBaseEncryption(enc, target, false, name),
	}
}

func NewEnforcableState(f *encryption, t *EnforcableTargetConfig, name string) StateEncryption {
	return &stateEncryption{
		base: newBaseEncryption(f, t.AsTargetConfig(), t.Enforced, name),
	}
}

func (s *stateEncryption) EncryptState(data []byte) ([]byte, hcl.Diagnostics) {
	return s.base.encrypt(data)
}
func (s *stateEncryption) DecryptState(data []byte) ([]byte, hcl.Diagnostics) {
	return s.base.decrypt(data, func(data []byte) error {
		tmp := struct{}{}
		return json.Unmarshal(data, &tmp)
	})
}
